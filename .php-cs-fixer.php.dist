<?php
declare(strict_types=1);

/*
 * (c) 2020 Georg Großberger <contact@grossberger-ge.org>
 *
 * This file is free software; you can redistribute it and/or
 * modify it under the terms of the MIT license
 *
 * For the full copyright and license information see the file
 * LICENSE or <https://opensource.org/licenses/MIT>
 */

use PhpCsFixer\Config;
use Symfony\Component\Finder\Finder;

$header = '(c) ' . date('Y') . ' Georg Großberger <contact@grossberger-ge.org>

This file is free software; you can redistribute it and/or
modify it under the terms of the MIT license

For the full copyright and license information see the file
LICENSE or <https://opensource.org/licenses/MIT>';

$finder = Finder::create()
    ->name('/\\.php$/')
    ->in(__DIR__ . '/src')
    ->in(__DIR__ . '/Configuration')
    ->in(__DIR__ . '/tests');

return (new Config())
    ->setUsingCache(true)
    ->setRiskyAllowed(true)
    ->setRules([
        '@PSR2'                                 => true,
        '@DoctrineAnnotation'                   => true,
        'align_multiline_comment'               => [
            'comment_type' => 'all_multiline',
        ],
        'array_indentation'      => true,
        'array_syntax'           => ['syntax' => 'short'],
        'backtick_to_shell_exec' => true,
        'binary_operator_spaces' => [
            'default'   => 'single_space',
            'operators' => [
                '=>' => 'align',
            ],
        ],
        'blank_line_after_namespace' => true,
        'cast_spaces'                => [
            'space' => 'single',
        ],
        'combine_consecutive_issets' => true,
        'combine_consecutive_unsets' => true,
        'compact_nullable_typehint'  => true,
        'concat_space'               => [
            'spacing' => 'one',
        ],
        'constant_case' => [
            'case' => 'lower',
        ],
        'declare_equal_normalize' => [
            'space' => 'none',
        ],
        'declare_strict_types' => true,
        'ereg_to_preg'         => true,
        'error_suppression'    => [
            'mute_deprecation_error' => false,
            'noise_remaining_usages' => false,
        ],
        'escape_implicit_backslashes' => [
            'double_quoted'  => true,
            'heredoc_syntax' => true,
            'single_quoted'  => true,
        ],
        'explicit_indirect_variable'   => true,
        'explicit_string_variable'     => true,
        'fully_qualified_strict_types' => true,
        'function_to_constant'         => true,
        'type_declaration_spaces' => [
            'elements' => ['function', 'property'],
        ],
        'header_comment'               => [
            'comment_type' => 'comment',
            'header'       => $header,
            'location'     => 'after_declare_strict',
            'separate'     => 'both',
        ],
        'heredoc_indentation'                     => true,
        'implode_call'                            => true,
        'is_null'                                 => true,
        'linebreak_after_opening_tag'             => true,
        'lowercase_cast'                          => true,
        'lowercase_static_reference'              => true,
        'magic_constant_casing'                   => true,
        'method_chaining_indentation'             => true,
        'modernize_types_casting'                 => true,
        'multiline_comment_opening_closing'       => true,
        'multiline_whitespace_before_semicolons'  => true,
        'native_function_casing'                  => true,
        'native_function_type_declaration_casing' => true,
        'new_with_braces'                         => true,
        'no_blank_lines_after_class_opening'      => true,
        'no_blank_lines_after_phpdoc'             => true,
        'blank_lines_before_namespace'         => [
            'min_line_breaks' => 2,
            'max_line_breaks' => 2,
        ],
        'no_empty_comment'                        => true,
        'no_empty_phpdoc'                         => true,
        'no_empty_statement'                      => true,
        'no_extra_blank_lines'                    => [
            'tokens' => ['extra'],
        ],
        'no_homoglyph_names'              => true,
        'no_leading_namespace_whitespace' => true,
        'no_mixed_echo_print'             => true,
        'no_short_bool_cast'              => true,
        'no_spaces_around_offset'         => [
            'positions' => ['inside', 'outside'],
        ],
        'no_trailing_comma_in_singleline' => [
            'elements' => ['arguments', 'array', 'array_destructuring', 'group_import'],
        ],
        'no_unneeded_control_parentheses'        => true,
        'no_unused_imports'                      => true,
        'no_whitespace_in_blank_line'            => true,
        'normalize_index_brace'                  => true,
        'object_operator_without_whitespace'     => true,
        'ordered_class_elements'                 => true,
        'ordered_imports'                        => true,
        'ordered_interfaces'                     => true,
        'php_unit_construct'                     => true,
        'php_unit_dedicate_assert'               => true,
        'php_unit_dedicate_assert_internal_type' => true,
        'phpdoc_indent'                          => true,
        'phpdoc_no_empty_return'                 => true,
        'phpdoc_order'                           => true,
        'phpdoc_scalar'                          => true,
        'random_api_migration'                   => true,
        'return_type_declaration'                => true,
        'self_accessor'                          => true,
        'set_type_to_cast'                       => true,
        'simple_to_complex_string_variable'      => true,
        'single_quote'                           => true,
        'single_trait_insert_per_statement'      => true,
        'space_after_semicolon'                  => true,
        'standardize_not_equals'                 => true,
        'ternary_operator_spaces'                => true,
        'trailing_comma_in_multiline'            => true,
        'trim_array_spaces'                      => true,
    ])
    ->setFinder($finder);
